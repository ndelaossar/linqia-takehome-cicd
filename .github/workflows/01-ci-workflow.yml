name: Continuous Integration Workflow

on:
  workflow_call :
    inputs:
      github_sha:
        type: string
        description: "The SHA of the commit that triggered the workflow"
        required: true
      app_folder:
        type: string
        default: "sample_app"
        description: "The folder where the app is located"
        required: false
      test_folder:
        type: string
        default: "tests"
        description: "The folder where the tests are located"
      validate_pr:
        type: boolean
        default: false
        description: "Whether to validate if the workflow was triggered by a PR"
        required: true
    secrets:
      DOCKERHUB_USERNAME:
        description: "Docker Hub username"
        required: true
      DOCKERHUB_TOKEN:
        description: "Docker Hub access token"
        required: true
     
jobs:
  # note: Lint and Test jobs can be run in diferents workflows to speed up the process 
  # however for simplicity they are in the same workflow here
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8

    - name: Lint with flake8
      run: |
        # Checks the code style
        flake8 ${{ inputs.app_folder }} --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ${{ inputs.app_folder }} --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    needs: lint
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.coverage_check.outputs.percentage }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        # if requirements.txt exists, install it
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run tests with coverage
      run: pytest ${{ inputs.test_folder }} --cov=${{ inputs.app_folder }} --cov-report=html --junitxml=test-results.xml

    - name: Extract coverage percentage
      id: coverage_check
      run: |
          PERCENTAGE=$(grep -o 'TOTAL.*' coverage/index.html | sed -e 's/<[^>]*>//g' | awk '{print $NF}')
          echo "percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
    
    # Siempre se ejecuta para subir el reporte, incluso si las pruebas fallan
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }} # Se aÃ±ade la versiÃ³n para diferenciar artefactos
        path: test-results.xml
          
    - name: Upload coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }} # Se aÃ±ade la versiÃ³n para diferenciar artefactos
        path: htmlcov/
  
  # Can run in a diferent workflow
  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: pinoched/liquia_cicd
          tags: |
            type=sha,format=short # Tag basado en el SHA del commit
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # only run this job for pull requests to avoid duplicate comments on main branch pushes
  post-pr-comment:
    name: Post Pull Request Comment
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: ${{ inputs.validate_pr }}
    permissions:
      pull-requests: write # Permission to create PR comments
    steps:
      - name: Create PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = "${{ needs.test.outputs.coverage }}";
            const imageTags = "${{ needs.build-and-push.outputs.image_tags }}".split(',').map(tag => `\`${tag.trim()}\``).join('<br>');
            const dockerRepo = "pinoched/liquia_cicd";
            const dockerLink = `https://hub.docker.com/r/${dockerRepo}/tags`;
            const runLink = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            const body = `
            ### CI/CD Report ðŸš€

            Docker image has been built and pushed successfully.
            - **Image Tags:** <br>${imageTags}
            - **Docker Hub Link:** [${dockerRepo}](${dockerLink})

            ---

            ### Test & Coverage âœ…

            - **Coverage:** \`${coverage}\`
            - **Artifacts:** Detailed test and coverage reports have been uploaded. You can download them from the [workflow run summary](${runLink}).

            `;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });